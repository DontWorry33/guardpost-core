# --- PostgreSQL Settings ---
POSTGRES_USER=aws_cspm_user
POSTGRES_PASSWORD=your_secure_password
POSTGRES_DB=aws_cspm_agent
# Construct the DATABASE_URL based on the above
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB} # For local access if needed
# Docker Compose will use: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

# Neo4j Connection
NEO4J_USER=neo4j
NEO4J_PASSWORD=your_neo4j_password # IMPORTANT: Change this!
GRAPH_REBUILD_STRATEGY=WIPE_AND_RELOAD # Set to 'NONE' to disable graph rebuilding
# Construct the NEO4J_URI based on the above
NEO4J_URI=neo4j://localhost:7687 # For local access if needed
# Docker Compose will use: neo4j://neo4j:7687

# --- RabbitMQ Settings (Optional - Using defaults) ---
RABBITMQ_USER=guest
RABBITMQ_PASSWORD=guest
# Construct the CELERY_BROKER_URL based on the above
CELERY_BROKER_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@localhost:5672// # For local access if needed
# Docker Compose will use: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//

# --- Redis Settings ---
# Construct the CELERY_RESULT_BACKEND based on Redis defaults
CELERY_RESULT_BACKEND=redis://localhost:6379/0 # For local access if needed
# Docker Compose will use: redis://redis:6379/0


# --- API Settings --- 
API_V1_STR=/api/v1
PROJECT_NAME="GuardPost"

# --- Security --- 
# Generate a strong, random secret key using: openssl rand -hex 32
SECRET_KEY="a_very_strong_random_secret_key_for_production_use_0123456789abcdef"
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# --- CORS --- 
# Adjust if your frontend runs on a different origin
BACKEND_CORS_ORIGINS='["http://localhost:8000"]' # Example for local dev

# --- AWS Credentials --- 
# Optional: Can be set here, but standard AWS credential chain is preferred.
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""
AWS_REGION=""

LOG_LEVEL=INFO